generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String   @id @default(cuid())
  email                 String   @unique
  password              String
  firstName             String
  lastName              String
  phoneNumber           String?
  dateOfBirth           DateTime?
  profileImage          String?
  role                  UserRole @default(CLIENT)
  isVerified            Boolean  @default(false)
  isActive              Boolean  @default(true)
  passwordResetToken    String?
  passwordResetExpires  DateTime?
  transactionPin        String?
  deletedAt             DateTime?
  deactivatedBy         String?
  deactivatedReason     String?
  deactivatedAt         DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  accounts     Account[]
  devices      Device[]
  sessions     Session[]
  auditLogs     AuditLog[]
  otpCodes      OtpCode[]
  contacts      Contact[]
  contactReplies ContactReply[]
  notifications Notification[]

  @@map("users")
}

model Account {
  id            String   @id @default(cuid())
  userId        String
  accountNumber String   @unique
  accountType   String   @default("SAVINGS")
  balance       Decimal  @default(0) @db.Decimal(10, 2)
  dailyLimit    Decimal? @db.Decimal(10, 2)
  monthlyLimit  Decimal? @db.Decimal(10, 2)
  isActive      Boolean  @default(true)
  deletedAt     DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("accounts")
}

model Device {
  id          String   @id @default(cuid())
  userId      String
  deviceId    String
  deviceName  String?
  platform    String?
  userAgent   String?
  isVerified  Boolean  @default(false)
  lastUsed    DateTime @default(now())
  deletedAt   DateTime?
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessions Session[]
  auditLogs AuditLog[]

  @@unique([userId, deviceId])
  @@map("devices")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  deviceId     String
  ipAddress    String
  userAgent    String?
  isActive     Boolean  @default(true)
  expiresAt    DateTime
  refreshExpiresAt DateTime
  deletedAt    DateTime?
  createdAt    DateTime @default(now())
  lastUsed     DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  device   Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String
  deviceId    String?
  action      String
  resource    String?
  details     Json?
  ipAddress   String
  userAgent   String?
  platform    String?
  timestamp   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  device   Device?  @relation(fields: [deviceId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

model Transaction {
  id            String          @id @default(cuid())
  refId         String          @unique
  accountId     String
  type          TransactionType
  amount        Decimal         @db.Decimal(10, 2)
  status        TransactionStatus @default(COMPLETED)
  reversedBy    String?
  reversedAt    DateTime?
  reversedReason String?
  deletedAt     DateTime?
  createdAt     DateTime        @default(now())

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  contacts Contact[]

  @@map("transactions")
}

model Contact {
  id            String   @id @default(cuid())
  userId        String
  title         String
  message       String
  transactionId String?
  status        ContactStatus @default(OPEN)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  transaction Transaction? @relation(fields: [transactionId], references: [id], onDelete: SetNull)
  replies ContactReply[]

  @@map("contacts")
}

model ContactReply {
  id        String   @id @default(cuid())
  contactId String
  userId    String
  message   String
  createdAt DateTime @default(now())

  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("contact_replies")
}

model OtpCode {
  id        String   @id @default(cuid())
  userId    String
  code      String
  type      OtpType
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("otp_codes")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType @default(INFO)
  metadata  Json?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  REVERSAL
}

enum TransactionStatus {
  PENDING
  COMPLETED
  REVERSED
  FAILED
  CANCELLED
}

enum OtpType {
  LOGIN
  TRANSACTION
  DEVICE_VERIFICATION
  EMAIL_VERIFICATION
  PIN_CHANGE
  PASSWORD_RESET
}

enum ContactStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum UserRole {
  CLIENT
  ADMIN
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  TRANSACTION
  SECURITY
  LOGIN_SUCCESS
  PASSWORD_RESET
  EMAIL_CHANGED
  TRANSACTION_PIN_CHANGED
  ACCOUNT_PASSWORD_CHANGED
  DEPOSIT_SUCCESS
  WITHDRAWAL_SUCCESS
  INSUFFICIENT_BALANCE
  TRANSACTION_REVERSED
  DEVICE_VERIFIED
}